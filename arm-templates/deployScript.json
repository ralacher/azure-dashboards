{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "blueprintName": {
            "type": "string",
            "defaultValue": "CAF-Foundation"
        },
        "location": {
            "type": "string",
            "defaultValue": "East US 2"
        },
        "msi": {
            "type": "string"
        },
        "Organization_Name": {
            "type": "string"
        }
    },
    "variables": {},
    "resources": [
        {
            "type": "Microsoft.Resources/deploymentScripts",
            "apiVersion": "2020-10-01",
            "name": "runPowerShellInline",
            "location": "[resourceGroup().location]",
            "kind": "AzurePowerShell", // or "AzureCLI"
            "identity": {
                "type": "UserAssigned",
                "userAssignedIdentities": {
                    "[parameters('msi')]": {}
                }
            },
            "properties": {
                "forceUpdateTag": "1",
                "azPowerShellVersion": "3.0",
                "environmentVariables": [
                    {
                        "name": "BlueprintName",
                        "value": "[parameters('blueprintName')]"
                    },
                    {
                        "name": "SubscriptionId",
                        "value": "[subscription().id]"
                    },
                    {
                        "name": "Location",
                        "value": "[parameters('location')]"
                    },
                    {
                        "name": "Organization_Name",
                        "value": "[parameters('Organization_Name')]"
                    }
                ],
                "scriptContent": "
$Params = @{ 'Organization_Name'=${Env:Organization_Name}; 'AzureRegion'=${Env:Location};  }
Install-Module -Name Az.ManagedServiceIdentity
# Create UAI and assign it to the subscription
$Id = New-AzUserAssignedIdentity -ResourceGroupName dashboards -Name ${Env:BlueprintName}
$Subscription = '/subscriptions/{0}' -f ${Env:SubscriptionId}
$Assignment = Get-AzRoleAssignment -ObjectId $Id.PrincipalId -RoleDefinitionName 'Owner' -Scope $Subscription
if ( ! $Assignment) {
    New-AzRoleAssignment -ObjectId $Id.PrincipalId -RoleDefinitionName 'Owner' -Scope $Subscription
}

# Clone the repository and import the Blueprint
git clone https://github.com/ralacher/azure-dashboards.git
cd azure-dashboards/arm-templates/Blueprint.zip
Import-AzBlueprintWithArtifact -Name ${Env:BlueprintName} -SubscriptionId ${Env:SubscriptionId} -InputPath CAF-Foundation -Force
$bp = Get-AzBlueprint | Where-Object {$_.Name -eq ${Env:BlueprintName} -And $_.SubscriptionId -eq ${Env:SubscriptionId}}

# Check for existing assignment and update or create a new one
$today = Get-Date
try {
    $as = Get-AzBlueprintAssignment -Name 'Assignment-CAF-Foundation' -SubscriptionId ${Env:SubscriptionId}

    $version = $as.BlueprintId.Split('/')[-1].Split('.')
    $year = $version[0]
    $month = $version[1]
    $day = $version[2]
    $inc = [int]$version[3]

    if ($today.Year -eq $year -And $today.Month -eq $month -And $today.Day -eq $day) {
        $inc += 1
        $newVersion = '{0}.{1}.{2}.{3}' -f $today.Year,$today.Month,$today.Day,$inc
        Publish-AzBlueprint -Blueprint $bp -Version $newVersion
    } else {
        $newVersion = '{0}.{1}.{2}.{3}' -f $today.Year,$today.Month,$today.Day,1
        Publish-AzBluePrint -Blueprint $bp -Version $newVersion -
    }
    $bp = Get-AzBlueprint -Name ${Env:BlueprintName} -SubscriptionId ${Env:SubscriptionId} -Version $newVersion
    Set-AzBlueprintAssignment -Name 'Assignment-CAF-Foundation' -Blueprint $bp -SubscriptionId ${Env:SubscriptionId} -Location ${Env:Location} -Parameter $Params
} catch {
    $newVersion = '{0}.{1}.{2}.{3}' -f $today.Year,$today.Month,$today.Day,1

    # Get existing Blueprints and exit if the current version already exists
    $bpList = Get-AzBlueprint | Where-Object {$_.SubscriptionId -eq ${Env:SubscriptionId} -And $_.Name -eq ${Env:BlueprintName}}
    if ($bpList) {
        if ($newVersion -In $bpList[0].Versions) {
            exit
        }
    }
    Publish-AzBluePrint -Blueprint $bp -Version $newVersion
    $bp = Get-AzBlueprint -Name ${Env:BlueprintName} -SubscriptionId ${Env:SubscriptionId} -Version $newVersion
    New-AzBlueprintAssignment -Name 'Assignment-CAF-Foundation' -Blueprint $bp -SubscriptionId ${Env:SubscriptionId} -Location ${Env:Location} -Parameter $Params
}
 ",
                "timeout": "PT30M",
                "cleanupPreference": "Always",
                "retentionInterval": "P1D"
            }
        }
    ]
}
